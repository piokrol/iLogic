AddReference "System.Data"
AddReference "System.Core"
AddReference "System.Xml"

Imports System.Data.SqlClient
Imports System.Data
Imports System.Xml
Sub Main()
    ' Tworzenie ciągu połączeniowego do bazy danych SQL Server.
    Dim connectionString As String = "Data Source=CBR-PKR;Initial Catalog=iLogic;Integrated Security=SSPI;"

    ' Zapytanie SQL do pobrania wszystkich danych z tabeli "tableTop".
    Dim query As String = "SELECT * FROM tableTop"

    ' Tworzenie nowego obiektu DataSet, który posłuży do przechowywania danych z bazy danych.
    Dim ds As New DataSet()

    ' Utworzenie nowego obiektu SqlConnection, który będzie używany do połączenia się z bazą danych.
    Dim cnn As SqlConnection = New SqlConnection(connectionString)

    ' Otwarcie połączenia z bazą danych.
    cnn.Open()

    ' Utworzenie nowego obiektu SqlCommand, który reprezentuje zapytanie SQL.
    Dim cmd As New SqlCommand(query, cnn)

    ' Utworzenie nowego obiektu SqlDataAdapter, który służy do wypełnienia DataSet danymi z wyniku zapytania.
    Dim da As New SqlDataAdapter(cmd)

    ' Wypełnienie DataSet danymi z wyniku zapytania SQL, zapisując wynik jako tabelę "tableTop".
    da.Fill(ds, "tableTop")

    ' Zamknięcie połączenia z bazą danych po zakończeniu operacji na bazie danych.
    cnn.Close()

    ' Pobranie referencji do tabeli "tableTop" z DataSet.
    Dim t1 As DataTable = ds.Tables("tableTop")

    ' Przetwarzanie każdego wiersza tabeli "tableTop" i wyświetlenie danych w MessageBox.
    Dim row As DataRow
    For Each row In t1.Rows
        MsgBox("ID: " & row("id") & ", Name: " & row("name") & ", Description: " & row("description") & ", Order Code: " & row("orderCode") & ", Delivery Time: " & row("deliveryTime"))

        ' Wywołanie funkcji ParseAndDisplayOrderCode, która podzieli pole "orderCode" na części i wyświetli dane do konsoli.
        ParseAndDisplayOrderCode(row("orderCode"))
		
        ' Zapisanie zmodyfikowanego pliku .ipt na dysku.
        Dim inventorApp As Inventor.Application = ThisApplication
        Dim oDoc As PartDocument = inventorApp.ActiveDocument
		
		Dim outputFolder As String="C:\Users\pkrol\Desktop\Szkoleniowe\webinary\output"

        ' Utworzenie nazwy pliku .ipt na podstawie wartości "orderCode".
        Dim orderCode As String = row("orderCode")
        Dim fileName As String = orderCode & ".ipt"

        ' Utworzenie pełnej ścieżki pliku.
        Dim filePath As String = outputFolder+"/"+fileName

        ' Zapisanie pliku .ipt na dysku.
        oDoc.SaveAs(filePath, False)
    Next
End Sub

Sub ParseAndDisplayOrderCode(orderCode As String)
    ' Podzielenie wartości pola "orderCode" na części, oddzielone myślnikami.
    Dim parts As String() = orderCode.Split("-")

    ' Wyświetlenie każdej części.
    For Each part As String In parts
        MsgBox("Order Code Part: " & part)
    Next

    ' Sprawdzenie, czy user parameter o podanej nazwie już istnieje.
    Dim oMyParameter As UserParameters = ThisApplication.ActiveDocument.ComponentDefinition.Parameters.UserParameters

    ' Znalezienie i zmiana wartości user parametera o nazwie "height_user" jeśli istnieje.
    For Each param As UserParameter In oMyParameter
        If param.Name = "height_user" Then
            ' Konwersja wartości na typ Double z uwzględnieniem precyzji i zmiana wartości user parametera.
            Dim heightValue As Double = CDbl(parts(1)) / 10 ' Podzielenie przez 10 aby przenieść jedno miejsce w prawo.
            param.Value = Math.Round(heightValue, 2) ' Zaokrąglenie do 2 miejsc po przecinku.
            Exit For
        End If
    Next

    ' Znalezienie i zmiana wartości user parametera o nazwie "width_user" jeśli istnieje.
    For Each param As UserParameter In oMyParameter
        If param.Name = "width_user" Then
            ' Konwersja wartości na typ Double z uwzględnieniem precyzji i zmiana wartości user parametera.
            Dim widthValue As Double = CDbl(parts(2)) / 10 ' Pominięcie pierwszego znaku i podzielenie przez 10 aby przenieść jedno miejsce w prawo.
            param.Value = Math.Round(widthValue, 2) ' Zaokrąglenie do 2 miejsc po przecinku.
            Exit For
        End If
    Next

    ' Znalezienie i zmiana wartości user parametera o nazwie "thickness_user" jeśli istnieje.
    For Each param As UserParameter In oMyParameter
        If param.Name = "thickness_user" Then
            ' Konwersja wartości na typ Double z uwzględnieniem precyzji i zmiana wartości user parametera.
            Dim thicknessValue As Double = CDbl(parts(3)) / 10 ' Pominięcie pierwszego znaku i podzielenie przez 10 aby przenieść jedno miejsce w prawo.
            param.Value = Math.Round(thicknessValue, 2) ' Zaokrąglenie do 2 miejsc po przecinku.
            Exit For
        End If
    Next

    ' Znalezienie i zmiana wartości user parametera o nazwie "radius_user" jeśli istnieje.
    For Each param As UserParameter In oMyParameter
        If param.Name = "radius_user" Then
            ' Konwersja wartości na typ Double z uwzględnieniem precyzji i zmiana wartości user parametera.
            Dim radiusValue As Double = CDbl(parts(4).Substring(1)) / 10 ' Pominięcie pierwszego znaku i podzielenie przez 10 aby przenieść jedno miejsce w prawo.
            param.Value = Math.Round(radiusValue, 2) ' Zaokrąglenie do 2 miejsc po przecinku.
            Exit For
        End If
    Next

' Znalezienie i zmiana wartości user parametera o nazwie "chamfer_user" jeśli istnieje.
For Each param As UserParameter In oMyParameter
    If param.Name = "chamfer_user" Then
        ' Konwersja wartości na typ Double z uwzględnieniem precyzji i zmiana wartości user parametera.
        Dim chamferValue As Double = CDbl(parts(5).Substring(2)) / 10 ' Pominięcie dwóch pierwszych znaków i podzielenie przez 10 aby przenieść jedno miejsce w prawo.
        param.Value = Math.Round(chamferValue, 2) ' Zaokrąglenie do 2 miejsc po przecinku.
        Exit For
    End If
    Next
	
InventorVb.DocumentUpdate()
	
End Sub


